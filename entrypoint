#!/bin/bash

function info() { echo "INFO: kompot: $*" >&2; }
function warning() { echo "WARNING: kompot: $*" >&2; }
function fatal() { echo "FATAL: kompot: $*" >&2; exit 2; }

# command line to exec if any
if (( $# > 0 )); then
    warning "Exec mode, environment is NOT setup!" >&2
    exec "$@"
fi

function mount_type() {
    mount |sed -nre "s,^([^ ]+) on $1 .*,\1,p";
}

function check_runsv() {
    local i
    for i in /etc/sv/*; do
        pgrep -f "^runsv ${i##*/}$" >/dev/null || return 1
    done
    return 0
}

# wait_until [-r] max_wait command...
# Wait until command return 0, or non-zero with -r
function wait_until() {
    local wait=0 reverse= max_wait retval
    [[ $1 == -r ]] && { reverse=1; shift; }
    max_wait=$1; shift
    while (( wait++ < max_wait )); do
        "$@"; retval=$?
        [[ -n $reverse ]] && retval=$((retval==0?1:0))
        [[ $retval == 0 ]] && return 0
        sleep 1
    done
    return 1
}

ping_group_range=$(< /proc/sys/net/ipv4/ping_group_range)
re_bad_ping_group_range=$'^[01]\t0$'
[[ -z $ping_group_range || $ping_group_range =~ $re_bad_ping_group_range ]] &&
    fatal "Run container with --sysctl net.ipv4.ping_group_range='0 2147483647'"

[[ $(mount_type /tmp) == tmpfs ]] || fatal 'Run container with --tmpfs /tmp'
[[ $(mount_type /run) == tmpfs ]] || fatal 'Run container with --tmpfs /run'

# try to detect if clone3 syscall is available
check_clone3=$(curl -m 0.1 -fsS localhost 2>&1)
[[ $? != 0 && $check_clone3 == *getaddrinfo* ]] &&
    fatal 'Update docker or at worst run container with --security-opt seccomp=unconfined'

systemd-tmpfiles --prefix=/dev --create --boot
systemd-tmpfiles --create --remove --boot --exclude-prefix=/dev

ulimit -Sn 1024 # soft nofile
ulimit -Hn 524288 # hard nofile

rm -f /run/nologin

env=( PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin )
[[ -t 1 ]] && env+=( "TERM=${TERM:-linux}" )
for i in $(env -0 |awk -v RS='\0' -v FS='=' '$1 ~ /^KOMPOT_/ {print $1}'); do
    env+=( "$i=${!i}" )
done

# Registrer services without starting them, in case they are needed in
# setup tasks. For this reason, runsvdir must be started in background.
# We want both SIGTERM (eg. docker stop) and SIGINT (eg. Ctrl+C) to stop
# the services gracefully.
for i in /etc/sv/*; do touch "$i/down"; done
trap 'info "Caught SIGTERM"' TERM
trap 'info "Caught SIGINT"' INT
env -i "${env[@]}" runsvdir -P /etc/sv &
wait_until 5 check_runsv || fatal 'runsv check did not pass, abort!'
for i in /etc/sv/*; do rm -f "$i/down"; done

# setup files
env -i "${env[@]}" /opt/kompot/bin/setup-kompot ||
    fatal 'Setup script failed'

# custom hook
if [[ -f /etc/kompot/docker/entrypoint.local ]]; then
    source /etc/kompot/docker/entrypoint.local ||
        fatal 'Failed to source entrypoint.local'
fi

info 'Starting services...'
env -i "${env[@]}" /opt/kompot/bin/init-kompot start
# Because they are trapped, SIGTERM and SIGINT will cause wait to return
# immediately after execution of the trap handler with an exit status of
# 128 + signum. Thus it is not always runsvdir status.
wait
trap - TERM INT

info "Stopping services..."
env -i "${env[@]}" /opt/kompot/bin/init-kompot --all stop
status=$?
wait_until -r 5 pkill -HUP -P "$$" runsvdir
# if any process remains, terminate them
wait_until -r 5 pkill -TERM -P "$$" || status=1
exit "$status"
